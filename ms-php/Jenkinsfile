pipeline  {
    agent any

    environment {
        // Telegram configre
        // TOKEN = credentials('telegramToken')
        // CHAT_ID = credentials('telegramChatid')
        TOKEN = "6476965277:AAGbiC51dS9RwGVo7y68OUJ3A1m5SbXVS4A"
        CHAT_ID = "-4002181219"

        // Telegram Message Pre Build
        CURRENT_BUILD_NUMBER = "${currentBuild.number}"
        // GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --format=%s ${GIT_COMMIT}").trim()
        // GIT_AUTHOR = sh(returnStdout: true, script: "git log -n 1 --format=%ae ${GIT_COMMIT}").trim()
        // GIT_COMMIT_SHORT = sh(returnStdout: true, script: "git rev-parse --short ${GIT_COMMIT}").trim()
        GIT_INFO = "Hello from dual gaming "
        TEXT_BREAK = "--------------------------------------------------------------"
        TEXT_PRE_BUILD = "${TEXT_BREAK}\n${GIT_INFO}\n${JOB_NAME} is Building \n ${CURRENT_BUILD_NUMBER}"

        // Telegram Message Success and Failure
        TEXT_SUCCESS_BUILD = "${JOB_NAME} is Success"
        TEXT_FAILURE_BUILD = "${JOB_NAME} is Failure"
        URINAME = "vinsovann847"
        ARTIFACT = "php"
        NUMBER = "${CURRENT_BUILD_NUMBER}"
    }

    

    stages {

        stage('Branch'){
            steps {
                echo "branch ${params.branchName.split('/').last()}"
            }
        }
        stage('checkout code') {
            steps {
                checkout scmGit(branches: [[name: "${params.branchName.split('/').last()}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/error404100230/php-docker']])
          
            }
        }
        
        stage('build image') {
            steps {
                sh "curl --location --request POST 'https://api.telegram.org/bot${TOKEN}/sendMessage' --form text='${TEXT_PRE_BUILD}' --form chat_id='${CHAT_ID}'"
                 withCredentials([string(credentialsId: 'DOCKER_REGISTRY_URL', variable: 'DOCKER_REGISTRY_URL')]) {
                      sh 'docker build -t ${DOCKER_REGISTRY_URL}/php:$BUILD_NUMBER .'
                 }
            }
        }
        stage('push image to hub') {
            steps {
              withCredentials([string(credentialsId: 'DOCKER_REGISTRY_URL', variable: 'DOCKER_REGISTRY_URL'), string(credentialsId: 'docker-hub-id', variable: 'hubpwd')]) {
                  
                  sh 'docker login -u ${DOCKER_REGISTRY_URL} -p ${hubpwd}'

                  sh 'docker push ${DOCKER_REGISTRY_URL}/php:$BUILD_NUMBER'

                  sh 'docker image rm ${DOCKER_REGISTRY_URL}/php:$BUILD_NUMBER';
              }
            }
        }

        stage('deploy swarm container') {
            steps {
                   echo "uri: ${URINAME}"
                   echo "artifact: ${ARTIFACT}"
            
                    sh 'docker stack deploy --compose-file docker-compose.yml testswarmcontainer  --env URI=${URINAME} --env ARTIFACT=${ARTIFACT} --env NUMBER=${NUMBER} '
                
            }
        }

        // stage('push telegram') {
        //     steps {
        //          sh "curl --location --request POST 'https://api.telegram.org/bot6476965277:AAGbiC51dS9RwGVo7y68OUJ3A1m5SbXVS4A/sendMessage' --form text='success ' --form chat_id='-4048256446'"
        //     }
        // }
        
    }

    post {
        success {
            script{
               sh "curl --location --request POST 'https://api.telegram.org/bot${TOKEN}/sendMessage' --form text='${TEXT_SUCCESS_BUILD}' --form chat_id='${CHAT_ID}'"
            }
        }
        failure {
            script{
                sh "curl --location --request POST 'https://api.telegram.org/bot${TOKEN}/sendMessage' --form text='${TEXT_FAILURE_BUILD}' --form chat_id='${CHAT_ID}'"
            }
        }
    }
}

// def sendTelegram(message) {
//    // def token = credentials('telegramToken')
//    // def chatId = credentials('telegramChatId')
//    // def apiUrl = "https://api.telegram.org/bot${token}/sendMessage"

//     def chatId = "-4048256446"
//     def apiUrl = "https://api.telegram.org/bot6476965277:AAGbiC51dS9RwGVo7y68OUJ3A1m5SbXVS4A/sendMessage"
//     def payload = [
//         uri: apiUrl,
//         contentType: 'APPLICATION_FORM',
//         body: [chat_id: chatId, text: message]
//     ]
//     httpRequest(payload)
// }
